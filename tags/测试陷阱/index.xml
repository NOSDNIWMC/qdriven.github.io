<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试陷阱 on Fluent QA Blog</title><link>https://qdriven.github.io/tags/%E6%B5%8B%E8%AF%95%E9%99%B7%E9%98%B1/</link><description>Recent content in 测试陷阱 on Fluent QA Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Apr 2021 09:25:03 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/%E6%B5%8B%E8%AF%95%E9%99%B7%E9%98%B1/index.xml" rel="self" type="application/rss+xml"/><item><title>测试陷阱6- 测试很容易</title><link>https://qdriven.github.io/blog/qa-traps/6-testing-is-hard/</link><pubDate>Mon, 26 Apr 2021 09:25:03 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-traps/6-testing-is-hard/</guid><description>最近一段时间经常听见有人说测试就是点点点，或者带着鄙视的声调说测试就是不就是点点点吗，一般情况下我不会回应，因为我知道就算回应也很难改变外面人的看法。不回应不代表我不去思考，测试真的就是点点点吗？我只想举个例子，大家都知道股票只要低买高卖就可以挣钱，但是有几个人靠股票人生开挂了？人们总是低估了做好看得懂的事情的难度，又高估了看不懂的事情的难度。
测试真的就是点点吗？ 测试真的就是点点点吗？很明显不是，就算你看到的是点点点，其实有些要比点点点难多了，至少为什么点这个而不是那个，为什么先点这个而不是那个，为什么点过了还要去继续再点？为什么要是很多种不同的情况，每种情况又是代表什么含义呢？ 你看到的点点点的背后都是有不同逻辑的思考，而不同逻辑的思考会是一件简单的事情吗？ 只是高估了看的懂的事情，但是完全没有了解过他的背后，但是点点点真的只是表象。我自己的经验来说，测试需要的逻辑可能比写代码更多，为什么？因为测试本生有两种意图，一种是验证正确性，一种是去找到可能会造成不正确的情况来验证正确性；后一种是巨大的难度，首选你的选择面很多，其次你如何挑选异常情况，理论上异常情况是无穷多的，你为什么能确信你在大海里面捞到的东西就是你想要的？再次，选择的一些情况实际上是有些是非常难以模仿的，那么如何去模拟这些情况又变得很难，这样一来你还会觉得简单吗？
测试就是一种实验，而实验是花大量时间和人力的地方，没有实验就不会有什么好的产品. 但是有一点是需要说明的，测试不代表就是专职测试人去做，这是一个非常重要的点，也是现在很多误区的来源.
测试难度的分类和难点 这边不去总结测试有什么样的类型，这些类型如何去做，换个简单从进行测试难度的角度思考测试的工作，大致可以分为：
确定性的测试，如同大众相关的各种互联网服务，这些功能一般人都可以理解，主要是验证功能是否实现， 这些工作难度不高，但是工作量大，需要的人员多，但是每个人的工资上限低 和底层技术结合的测试，主要验证关键技术在EdgeCase上面的表现，这块要求高，测试能力代表工程能力，这块更多的是实验， 基本可以认为测试者就应该是开发者，或者比简单的开发人员更加高级的技术专家，极高的专业性 专业领域知识门槛高，领域知识一般人不懂，如化工，金融，航空等等，这些专业知识的积累绝不比通用技术难度低，极高的专业度 从领域角度我觉得大体分为三大类，那么这些从业人员的优缺点来看：
第一类，可替代性高，有上限，如果希望寻求有提升，我觉得就两个方向，一个是比其他人知道的多，在多个内容里面比其他人熟悉， 另外一个就是可以和技术结合，可以用技术手段解决确定性问题，比如通过代码能够自动化整个确定性的内容 第二类，技术性强但是问题是就业面窄，同时一般赢家通吃，刚好你做的内容是其他家强，或者被新事物淘汰，那么会遇到很大的挑战 这一类需要把原理搞的很懂，同时有一块比别人深入很多，那么在特定领域有很好的用途 第三类，大部分人忽律了专业领域的知识本质上也是技术的一种，和编程一样也是专业领域知识，这类人同时如果懂专业知识和编程，那么是高手中的高手，独当一面是自然而然的；但是大部分人是做不到的，一旦这个领域知识是一个高迭代或者非常偏门，那么和第二类一样也是面临直接淘汰 实际上从优缺点来看，大部分从事测试的人要么就是有很明显的上限，要么就是一个牛的不能再牛的人才，而在中间地带，实际上没有太多空间的.</description></item><item><title>测试陷阱5 - 测试就是找Bug</title><link>https://qdriven.github.io/blog/qa-traps/5-qa-bugs/</link><pubDate>Sun, 10 Jan 2021 20:43:24 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-traps/5-qa-bugs/</guid><description>在我工作过的公司中，大部分的开发和测试工程师对于测试工程师的定位就是找Bug的人.这个认识我觉得没有什么问题，因为确实测试功能师大部分的工作就是找Bug. 一开始我自己也从来没有怀疑过，感觉这个定义偏差不是太大，但是随着工作年限的增加，我觉得这个定位越来越不那么正确了.
为什么这样子说呢？我分两个方面来说明：
测试的目的只是保证质量吗？ 测试过程中发现的Bug到底能代表什么？ 测试的目的只是保证质量吗？ 测试的目的只是保证质量吗？我觉得说是，没有什么问题的；但是保证质量了它又是为了什么呢？为了让产品更有竞争力！ 所以测试的最根本的目的是为了产品更有竞争力！有了这一个目的，作为测试人员也许需要把眼界放的更开阔一些，需要更多平衡的思维.
从产品的角度看，质量是其中一个维度，其他还有很多维度，比如成本等等. 如果测试工程师把自己局限在找Bug的人，那么有时真的变成 只找Bug的人了，有些场景可能大家很熟悉，为了一个Bug进行了无休止的讨论，辩论，面红耳赤，但是如果仔细想想，你会发现这样讨论的目的是什么？ 想达到什么结果？这些其实是成本意识，在一场无休止的讨论之后到底有什么产出？有时产出无非就是：
是不是Bug 需不需要修复 是不是需要马上修复 这些问题其实是关于产品的问题，是不是Bug有时比起后面两个来说根本不是问题。 如果我们局限在找Bug的人的时候，有时容易为了是不是Bug争论了太多时间，而没有对两条更重要的点提出自己意见，达成任何对产品有帮助的共识进行行动，是不是有一些没有把握到重点？</description></item><item><title>测试陷阱4-跳出舒适区</title><link>https://qdriven.github.io/blog/qa-traps/4-comfortable-zone/</link><pubDate>Thu, 07 Jan 2021 11:40:11 +0200</pubDate><guid>https://qdriven.github.io/blog/qa-traps/4-comfortable-zone/</guid><description>最近几年陆陆续续也面试了不少测试的同学，好多同学也都提到了跳出舒适区的概念，好多人因为觉得需要跳出舒适区所以觉得需要换一个工作环境； 就测试而言好多同学都是觉得一直在做类似的事情，没有外部刺激，没有提高；同时又相信没有实际的项目锻炼，技能很难得到提高；甚至有些同学很明显 在自己公司做的还是不错的，升职也有，加薪也有，可是就是觉得自己在舒适区里面，觉得一定要跳出来才能很快提高。大体上套用美国总统的话就是keep me great.
因为听多了,跳出舒适区貌似是这几年很流行的词语，也能在各个媒体上能看到听到，所以我有时想想貌似挺有道理的，跳出舒适区，接受挑战；可是有时又觉得总有些不对劲，为什么要跳出舒适区呢？舒适区有什么不好呢？最终最终跳出舒适区的目的是什么呢？
跳出舒适区的最终目的是什么？ 因为年纪大了，现在习惯性的会问自己最终的目的是什么？最终想达到什么样的状态？ 对于跳出舒适区这种史诗般问题，我感觉是几乎等同于你活着为了什么这种宏大的哲学问题时，可是我跳出来的答案是难道我不是为了自己过的舒服点过日子吗？舒服点的日子不在舒适区里面过，在哪里过呢？所以我明白了我觉得不对劲的问题点在哪里了。无论你跳的动还是跳不动，最终不是应该去找到舒序区才对吗？ 至于跳出这种，不过是听上去有点叛逆，无非就是让你显得有点酷有点得瑟吗？所以问题变成了如何寻找舒适区，跳出和寻找其实还是又很大不一样的，跳出很多时候变成了非理性，变成了我非要脱离现在的环境，不管我下面的环境是什么，更重要的一点是跳出其实是没有说明目的地的，只说要跳，没说要跳哪里还是可怕的，下面是万丈深渊呢？；而寻找最大的不同就是想要一个目的地，归根到底还是会有目标的，想想你的目标是什么？难道目前的环境真的一点实现的机会都没有吗？ 我不觉得跳出舒适区不对，但是在准备跳出去，还是需要再想一次.
还有一个叫能力圈的说法 无论愿不愿意承认，大多数的情况下，跳出舒适区钱还是会起到点作用的，至少认为跳出去了，会有挣更多钱的机会,这也没什么不对。但是按照前首富巴菲特的说法投资最主要原则是能力圈原则，挣钱其实基本上认为就是投资，你投资自己，利用自己的劳动获取最可观的收益，那么很显然这个原则很重要。然而这个原则 听起来和跳出舒适区有冲突，他说如果你找到自己的能力圈了，那么就不要出去了，稳稳妥妥的挣钱就是了，你并需要什么跳出这跳出那，你找到你的优势,好好想想你在当前环境里面的优势是什么，你的能力圈的边界是哪里，稳稳妥妥的把钱挣了没什么不好，超过了你的能力圈的边界可能更多的是亏损。无论钱听上去多么庸俗，但是它确实是可以改善你生活，帮助你达到你要的目标的最好最直接的东西。
下面是一段查理·芒格说的话，我更愿意相信真的挣到钱的人，而不是相信那些看起来高大上公司(说不定明天就倒闭了)的CTO/CEO.
So, the simple takeaway here is clear.</description></item><item><title>测试陷阱3-自动化测试就是测试的技术</title><link>https://qdriven.github.io/blog/qa-traps/3-tech-is-all/</link><pubDate>Fri, 27 Nov 2020 23:49:47 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-traps/3-tech-is-all/</guid><description>随着自动化测试的风靡，测试同学们越来越觉得自动化就是全部，自动化就是自己的方向。 这些本身没有太大问题，但是如果认为自动化测试就是终极技术，那么我觉得这是一个很大的陷阱。 为什么？个人觉得大部分的测试把自动化和技术都定义的太狭小了,技术和自动化都是非常宽泛的定义,下面是我自己问自己的两个问题:
什么是自动化？测试讨论的自动化难道就是接口自动化，UI自动化测试吗？ 什么是技术？技术难道就是写代码吗？把测试用例代码化吗？ 什么是自动化？测试讨论的自动化难道就是接口自动化，UI自动化测试吗？ 为什么先问这个问题，因为很多同学一开始没有接触过自动化，后来写了一些自动化用例之后，要么觉得高人一等，要么觉得一会就觉得没意思了，原因何在？因为写过自动化测试用例之后，要么觉得我技术很厉害了，基本可以把所有问题都解决了；要么马上一个疑问是这有技术含量吗？ 大量重复的代码，差不多的验证点，没有比设计测试用例和执行用例高级到多少,然后就有一种深深的幻灭的感觉？路在何方的问题又来了.
其实什么都可以是自动化,把原来重复做的事情用代码实现是自动化的一种；把类似的事情用代码实现也是自动化的一种；把 日常工作用代码实现也是自动化；这些自动化都是在做了一次之后再用代码去实现，如果用时髦一点的时候machine learning/ai去把 没做过的事情自动实现了,也是自动化. 我甚至可以说，社会生产力的进步都是每一个自动化的结果。 如果从这个角度看的，那么自动化能做的事情太多了，自动化测试也好，测试自动化也好，你可以做的事情有很多很多，多到你无法想像，问题是你有 能力做吗？ 那些写接口自动化，web ui自动化的技能足够你去做更多的自动化吗？
自动化的目的大致就是为了不让人去做差不多的事情，减少重复劳动。用一样的方法做一样的事情是重复劳动，用不一样的方法重新再做一遍一样的事情也是重复劳动；如果目标是减少重复劳动，那么自动化测试就不能停在把测试自动化这一步，还有很多很多的事情可以做。但是坦白说，有哪些事情，我也说不出来，但是我觉得用代码再去实现一遍测试过用例，也是一种重复劳动，只是还没有能力把这件事情不重复做，但是相信一定有一些办法，有一些方面是可以解决的。</description></item><item><title>测试陷阱2-永远都在忙碌重要紧急的事情</title><link>https://qdriven.github.io/blog/qa-traps/2-things-matter/</link><pubDate>Sat, 31 Oct 2020 13:22:54 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-traps/2-things-matter/</guid><description>测试永远都很忙，忙着回归测试，忙着各种各样的测试，各种各样的交付，但是这样忙碌了3年左右之后， 你发现你在确实是进步了，进步的主要方面我想大部分就是以下几个方面:
沟通能力增强了 业务熟悉了非常多，开发测试流程熟悉了很多 处理紧急事情能力提高了很多 这已经很不错，可能有些测试同样的过了三年这些进步都没有，更多的在听指令，别人说测试就是做测试。
但是又过了三年，那些快速进步的测试，发现貌似和前面三年的进步比起来，这三年的进步幅度没有那么明显了, 以前你没有办法参与决策，现在还是一样没有办法参与决策，这三年做的事情貌似没有太多变化，可能可以带 1，2个人进行测试，做的事情和以前又本质的区别吗？于是反思自己，到底哪方面还有欠缺，造成了这几年进步不大？ 答案往往就是可能是技术方面还不够，那么就想加强技术吧。于是越来越焦虑，主要发现看了1个月一门语法，结果1个星期没有用， 都忘了；忙碌的工作让三个月一转眼就过了，回顾一下，发现貌似什么变化的没有发生？怎么办？再过三年还是和现在一样？怎么办， 一会就过30了，外面35岁的人就不要了，我怎么办？ 焦虑自然就越来越多了。
这个问题我觉得没有答案，但是我只想说，说到底，技术提高是需要资源的，而时间是一个重要的资源，如果你在最初的三年提高很快， 那么我想学习能力这个资源你是不缺的，但是所有的提高都需要你的时间资源，而你自己的时间资源管理起来了吗？你把它用到一些你认为非常重要，但是可能又不是马上要做的事情上吗？你如果这么回头一看，我相信你可能1天1个小时时间都没有花到你认为很重要的事情上面。
焦虑每个人都有，但是怎么应对，怎么解决自己的问题才是关键。
如何应对焦虑 焦虑是要克服的，往往自我要求高的人越焦虑，对于如果应对焦虑，我觉得可以从下面两个方面想：</description></item><item><title>测试陷阱1 - 放弃怀疑</title><link>https://qdriven.github.io/blog/qa-traps/1-no-doubt/</link><pubDate>Thu, 29 Oct 2020 20:43:24 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-traps/1-no-doubt/</guid><description>对于大部分的初级测试人员来说，有时放弃怀疑可能在工作中陷入一些被动，甚至让自己的生活有时也会搞得一团乱. 下面我从一个加班事件说起，看看我们如果应对一些突发的情况.
从一个加班事件说起 事情的由来是这样的,由于某种原因，一个功能只能在生产环境测试，于是测试同学自己觉得这个功能简单，就预估半天时间就可以测试完成。结果呢？由于各种配置问题，上了生产主流程都不通，然后一通检查，最后从上午一直到到晚上10点的时候发现需要的一个第三方账户权限设置错误，造成功能不同，然后在配置修改完了之后，再进行测试，结果弄到凌晨结束。从这个事情来看，完全从功能角度看，其实可能确实只要半天时间，但是这个功能又有很多依赖关系，而这些依赖关系确花了比实际测试更长的时间，而真正造成这些时间的问题确从来没有去怀疑过。于是班加了，结果其实还不太好，对外看来为什么会到最后才发现这些问题？为什么事前没有计划，为什么到最后主流程还不通？为什么从来没有人提出过这个里面可能的风险？
怀疑不等于不相信，怀疑是想确认 我事后分析了一下，有一点就是测试同学早早的放弃了怀疑，放弃怀疑了两个地方:
这些配置问题在开发过程中就会被发现？ 因为开发承诺会测试 这些功能很简单，就没有去深究这里面的依赖关系，这些总会有人去搞定的 首先我想明确的一点是，怀疑不等于不相信，这个共识是需要团队达成的. 怀疑是想对事情本身的确认，而不是对开发人员的怀疑，有了这个基本共识，我觉得测试人员就应该多提问题，多怀疑，把怀疑的点变成实际放生的事实，把要做确没有做的事情落实，这样才能减少突发情况，才可以少加点班。遗憾的事，即使发生了这样的事情，大多数的测试人员还是会轻而易举的接受这样的事实，听开发人员一解释说是运营人没有告诉他账户设置，造成了此次问题，这样就过去了，我想这样的事情以后还是会发生。因为再一次的放弃了怀疑，根据发生的事情，一定程度上是可以推导将来发生的事情的，比如很明显，这么一件事情看出来:
开发没有做任何自测，因为如果自测，那么一定可以老早就发现这个问题了 开发喜欢推卸了一定的责任，这个事情的关键点不是谁没有把账号告诉别人，而是为什么这样的事情到最后才发现 事实上做这个功能基本上没有做任何的调研，如果做了调研就一定会知道需要什么账户的，不是吗？那以后怎么做调研？ 真的只能生产了才可以测试吗？实际情况不是多申请一个第三方账户就可以在测试环境测试了吗？如果测试了不是应该老早就发现账户配置的问题了吗？就算只有一个账户，产生的测试数据可以删除吗？ 如果测试不通过事实去怀疑一些，有了怀疑又去确认一些事情，那么处在开发环节的最下游，太多的不确定性都变成自己来承担，种种压力，种种加班就会都来；到最后没有太多人会帮到你，因为到了最后一旦出了点问题，就可能变成了大问题，就可能被老板追责了。</description></item></channel></rss>