<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataPlatform on Fluent QA Blog</title>
    <link>https://qdriven.github.io/tags/dataplatform/</link>
    <description>Recent content in DataPlatform on Fluent QA Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 May 2021 21:34:04 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/dataplatform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android 命令Cheetsheet</title>
      <link>https://qdriven.github.io/blog/cheetsheet/android_tips-1/</link>
      <pubDate>Thu, 27 May 2021 21:34:04 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/cheetsheet/android_tips-1/</guid>
      <description>Android截图命令screencap 查看帮助命令 adb shell screencap -v screencap: invalid option -- v usage: screencap [-hp] [-d display-id] [FILENAME] -h: this message -p: save the file as a png.</description>
    </item>
    
    <item>
      <title>数据中台研究-1</title>
      <link>https://qdriven.github.io/blog/data-platform/1-intro/</link>
      <pubDate>Thu, 27 May 2021 21:34:04 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/data-platform/1-intro/</guid>
      <description>关于所以中台的研究，我的第一个问题总是为什么有中台这个东西？所以对应到数据中台就是为什么有数据中台这个概念？ 他解决什么问题？和原来的不是中台的情况下有什么优势？有什么不同点？
为什么有数据中台 我自己的理解是从三方面看:
 数据量和多样性的指数式增长，必然造成数据相关技术的快速迭代，以及沿用旧技术越来越难以跟上新的发展，技术能力直接会影响到企业的业务和产品能力 单独业务团队负责自身数据的技术在原有的基础上变得越来越困难，面临的选择是：  扩张自身团队，跟上技术发展 把这部分数据业务交给专门人来做，自己专注使用和自身业务而不是基础技术   公司层面，自然看到了数据能力的重要性，但是在业务团队有两种不同的选择时，个人认为为倾向选择业务团队2的选项，为什么？因为1选项自然会出现重复建设， 大数据成本还是相当高的，公司从自身出发自然会选择看起来成本有优势的选择；同时数据的关联性变得越来越重要也支持公司建立数据中台的决策  以上是我认为公司会选择数据中台的原因。 同样我相信公司也了解数据中台之后，面临的问题是沟通成本上升，但是公司一定认为自己的组织能力是有办法解决这个问题的.
数据中台做什么事情和需要的能力 数据中台分层  ODS： Operation Data Store： 数据仓库源头系统的数据表通常会原封不动的存储一份，这称为ODS层，是后续数据仓库加工数据的来源 数据仓库：  DWD: Datawarehouse Detail DWB: Datawarehouse Base DWS: Data warehouse service ADS: Application Data Service DWM: Data warehouse Detail DIM: dimension   ETL: Extract-Transform-Load 范式：  第一范式：字段值不可分理 第二范式：确保表的每列都和主键相关 第三范式：确保每列都和主键列直接相关，而不是间接相关    Hadoop/Spark/Flink </description>
    </item>
    
  </channel>
</rss>
