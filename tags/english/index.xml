<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on Fluent QA Blog</title>
    <link>https://qdriven.github.io/tags/english/</link>
    <description>Recent content in English on Fluent QA Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2019 23:58:45 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement A Integration Testing Libs in two days</title>
      <link>https://qdriven.github.io/blog/en/api-testing/0-start-from-the-end/</link>
      <pubDate>Sun, 28 Jul 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/0-start-from-the-end/</guid>
      <description>There is a question over my head several times. is it real hard for tester to write test codes? I don&amp;rsquo;t know, but I just want to do a task to evaluate this conclusion.</description>
    </item>
    
    <item>
      <title>Integration-Runner Test Case Demo</title>
      <link>https://qdriven.github.io/blog/en/api-testing/1-demo-testcase/</link>
      <pubDate>Sun, 28 Jul 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/1-demo-testcase/</guid>
      <description>Last chapter introduce how to build a test framework in two days, In this chapter, let&amp;rsquo;s do demos:
 A Api TestCase Api Chain Test Case Pre-Condition And Verification Render to use context data  A Api TestCase Here are two cases:</description>
    </item>
    
    <item>
      <title>Using IntelljIdea For Code Coverage</title>
      <link>https://qdriven.github.io/blog/en/3-inteljidea-codecoverage/</link>
      <pubDate>Sun, 28 Jul 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/3-inteljidea-codecoverage/</guid>
      <description>Two Steps:
 Run Test Code with code coverage - Right click the test class, select run *** with code coverage  Check the Code Coverage in intelli idea    Line Code Covearge/Method Coverage   Read marked as not covered lines, green as covered lines   </description>
    </item>
    
    <item>
      <title>The Easiest Mock, The highest ROI</title>
      <link>https://qdriven.github.io/blog/en/4-productivity-simplemock/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/4-productivity-simplemock/</guid>
      <description>Actually it is not about how to test Rule Based Risk Engine, it is about how to use simple codes to improve the daily productivities.</description>
    </item>
    
    <item>
      <title>The Easiest Mock, The highest ROI</title>
      <link>https://qdriven.github.io/blog/en/api-testing/4-productivity-simplemock/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/4-productivity-simplemock/</guid>
      <description>Actually it is not about how to test Rule Based Risk Engine, it is about how to use simple codes to improve the daily productivities.</description>
    </item>
    
    <item>
      <title>Rule Based Risk Engine Part 3 - The Easiest Mock, The highest ROI</title>
      <link>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-3/</link>
      <pubDate>Sun, 28 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-3/</guid>
      <description>Actually it is not about how to test Rule Based Risk Engine, it is about how to use simple codes to improve the daily productivities.</description>
    </item>
    
    <item>
      <title>Rule Based Risk Engine Part 2 - Write Code to Test</title>
      <link>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-2/</link>
      <pubDate>Thu, 25 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-2/</guid>
      <description>What to do is quite obvious:
 Compose input data - Test Case Input  Fundamental Data Third Party And in-house data   Mock the third party and in-house data according test cases Call the Evaluation API to checkout if meet the expectation  And how to write code?</description>
    </item>
    
    <item>
      <title>Rule Based Risk Engine Testing Part 1- Background</title>
      <link>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-1/</link>
      <pubDate>Tue, 23 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/creditrisk-testing-1/</guid>
      <description>This article introduces a real world case for testing a rule based risk engine. Let me separate it into several parts:</description>
    </item>
    
    <item>
      <title>Build API Testing Framework-1 - Learn Http Api</title>
      <link>https://qdriven.github.io/blog/en/api-testing/apitesting-intro/</link>
      <pubDate>Sat, 20 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/apitesting-intro/</guid>
      <description>Build API Testing Framework-1 - Learn Http Api API now, in most cases, it is a HTTP API which over http protocol.</description>
    </item>
    
    <item>
      <title>Build API Testing Framework-1 - Learn Http Api</title>
      <link>https://qdriven.github.io/blog/en/apitesting-intro/</link>
      <pubDate>Sat, 20 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/apitesting-intro/</guid>
      <description>Build API Testing Framework-1 - Learn Http Api API now, in most cases, it is a HTTP API which over http protocol.</description>
    </item>
    
    <item>
      <title>Loan Calculation Testing</title>
      <link>https://qdriven.github.io/blog/en/api-testing/loan-calculation/</link>
      <pubDate>Mon, 13 Aug 2018 22:35:32 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/en/api-testing/loan-calculation/</guid>
      <description>Loan Calculation Example  Loan Rule Defintion Installment Calculation Overdue Calculation IRR Calculation  Loan Rule Definition Installments Calculation  repayment-Principal: ROUND(10000/3,2) repayment-interest: ROUND(10000*2%,2)  Advanced Repayment calculation Overall Payment = Current Term Repayment + Remain Principal+ default penalty(10000*1%)</description>
    </item>
    
  </channel>
</rss>
