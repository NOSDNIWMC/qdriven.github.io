[{"categories":null,"contents":"写一个Ansbile Module实际上非常容易，我从看 https://github.com/SeleniumHQ/ansible-selenium.git 这个源码的方式大概可以了解Ansible的一个简单的 插件.\n下面分几个内容来看：\n 插件运行代码 插件的meta的数据  Ansible 插件代码  首先Ansible 插件的入口函数为main函数  所以先定义一个main函数，以及main函数的运行\ndef main():  pass  main()  实现main函数  主要步骤是：\n module定义，Ansible的module，定义这个AnsibleModule的argument_spec,这个里面用来声明这个插件使用的参数 module.params，ansible的输入为task的yml文件，这里面定义的内容都会传递到这个params中 然后根据不同的state的值去调用不同的任务，所有不同的任务的参数都是module，module用来传递了运行时的上下文 实现不同state对应的任务 基本上就结束了一个Ansible插件了   module = AnsibleModule(  argument_spec=dict(  role=dict(choices=[\u0026#39;standalone\u0026#39;, \u0026#39;hub\u0026#39;, \u0026#39;node\u0026#39;], default=\u0026#39;standalone\u0026#39;),  state=dict(choices=[\u0026#39;running\u0026#39;, \u0026#39;stopped\u0026#39;, \u0026#39;restarted\u0026#39;], default=\u0026#39;running\u0026#39;),  version=dict(default=\u0026#39;2.53.0\u0026#39;),  path=dict(default=\u0026#39;.\u0026#39;),  force=dict(default=False, type=\u0026#39;bool\u0026#39;),  args=dict(required=False, default=\u0026#39;\u0026#39;),  java=dict(required=False, default=\u0026#39;/usr/bin/java\u0026#39;),  logfile=dict(required=False, default=\u0026#39;./selenium.log\u0026#39;),  javaargs=dict(required=False, default=[], type=\u0026#39;list\u0026#39;),  ),   supports_check_mode=False,   mutually_exclusive=[]  )   state = module.params[\u0026#39;state\u0026#39;]  role = module.params[\u0026#39;role\u0026#39;]   if state == \u0026#39;running\u0026#39;:  (changed, pid) = start(module)  finish(module, msg=\u0026#39;%sis running\u0026#39; % role, changed=changed, pid=pid)  elif state == \u0026#39;stopped\u0026#39;:  changed = stop(module)  finish(module, msg=\u0026#39;%sis stopped\u0026#39; % role, changed=changed)  elif state == \u0026#39;restarted\u0026#39;:  (changed, pid) = restart(module)  finish(module, msg=\u0026#39;%shas restarted\u0026#39; % role, changed=changed, pid=pid) start 任务的一个例子：\ndef start(module):  \u0026#34;\u0026#34;\u0026#34; Start the Selenium standalone :param module: :return: \u0026#34;\u0026#34;\u0026#34;   _, jar_file = download(module)   changed = False  role = module.params[\u0026#39;role\u0026#39;]  if role != \u0026#39;standalone\u0026#39;:  role = \u0026#34;-role %s\u0026#34; % role  else:  role = \u0026#39;\u0026#39;   if not is_running(module): # in another implementation  changed = True  args = \u0026#39;\u0026#39;  java_args = \u0026#39;\u0026#39;  if module.params[\u0026#39;args\u0026#39;]:  for (k, v) in module.params[\u0026#39;args\u0026#39;].iteritems():  args += \u0026#39;-%s=%s\u0026#39; % (k, v)   if module.params[\u0026#39;javaargs\u0026#39;]:  for arg in module.params[\u0026#39;javaargs\u0026#39;]:  java_args += \u0026#39;-%s\u0026#39; % arg   java_executable = os.path.abspath(os.path.expandvars(module.params[\u0026#39;java\u0026#39;]))  log_file = os.path.abspath(os.path.expandvars(module.params[\u0026#39;logfile\u0026#39;]))   cmd = \u0026#34;%s%s-jar %s%s%s\u0026gt;\u0026gt; %s2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; % (java_executable,  java_args,  jar_file,  role,  args,  log_file)   os.setsid()   #print cmd  rc = os.system(cmd)   if rc != 0:  abort(module, \u0026#39;Running the %srole returned code %s!\u0026#39; % (role, rc))   pid = get_pid(module)  if pid:  return changed, pid  else:  abort(module, \u0026#39;Couldnt fetch the pid of the running %s! It may have ended abruptly.\u0026#39; % module.params[\u0026#39;role\u0026#39;]) Meta 插件的meta的数据 meta信息一般存放在meta目录中，具体写的方式参考源码: https://github.com/SeleniumHQ/ansible-selenium.git\n","date":"September 13, 2018","image":null,"permalink":"/blog/ansible/ansible-module-1/","title":"学习ansible module-1"},{"categories":null,"contents":"Ansible Basic Concept ansible 是一个操作机器的工具,可以通过编排不同的inventory,组合不同的命令来将日常运维的操作 变成可运行的脚本资产,同时也可以积累常用的脚本以便复用.\n下面是关于ansible的一些基础概念的脑图,总体而言ansible包括了以下几个概念：\n inventory: 定义主机,定义操作对象  Host:主机 Group：不同的主机组合成一个组，一个组下面可以有子组，于是就构成了一个树形结构   variable： 变量，主要用来定义对于操作机器时使用的可变参数  Ansible Installation  install in MAC  brew unisntall ansible brew install ansible  install in centos  sudo yum install epel-release sudo yum install ansible -y Configure hosts for ansible ssh connector  copy ssh key to different hosts  ssh-keygen ssh-copy-id remoteuser@remote.server ssh-keyscan remote.server \u0026gt;\u0026gt; ~/.ssh/known_hosts  check ssh connection  ssh remoteuser@remote.server Done.\nAnsible Ad-hoc Commands ansible 命令的pattern 如下：\nansible \u0026lt;host-pattern\u0026gt; [options] 具体查看ansible 的使用帮助是：\nansible --help ansible ad-hoc command - 检查安装环境 ansible all -m ping -u root ansible ad-hoc command - 执行命令 ansible all -a \u0026#34;/bin/sh echo hello world\u0026#34; ansible ad-hoc command - copy files ansible web -m copy -a \u0026#34;src=/etc/hosts dest=/tmp/hosts\u0026#34; ansible ad-hoc command - yum install ansible web -m yum -a \u0026#34;name=acme state=present\u0026#34; ansible ad-hoc command - add user ansible all -m user -a \u0026#34;name=foo passsword=\u0026lt;crypted password here\u0026gt;\u0026#34; ansible ad-hoc command - download git 包 ansible web -m git -a \u0026#34;repo=git://foo.example.io/repo.git dest=/src/myapp\u0026#34; ansible ad-hoc command - start service ansible web -m service -a \u0026#34;name=httpd state=started\u0026#34; ansible ad-hoc command - 并行运行 ansible web -a \u0026#34;/sbin/reboot\u0026#34; -f 10 ansible ad-hoc command - 查看全部系统信息 ansible all -m setup ansible ad-hoc command 小结 从以上的例子中我们可以看到ansible的命令一般都会使用如下几点：\n module: -m module_args: -a hosts: all/web/\u0026hellip;\u0026hellip;  以上三个组合成为了下面的一个命令：\nansible all -m service -a \u0026#34;name=httpd state=started\u0026#34; 从python的角度看,可以用伪代码的方式:\n def copy(args={}):  for kwarg, v in args.items():  print(\u0026#34;{key}={value}\u0026#34;.format(key=kwarg, value=v))   def test(args={}):  for kwarg, v in args.items():  print(\u0026#34;{key}={value}\u0026#34;.format(key=kwarg, value=v))   module_mapping = {  \u0026#34;copy\u0026#34;: copy,  \u0026#34;test\u0026#34;: test }   def ansible(module, module_args):  func = module_mapping.get(module)  parsed = module_args.split(\u0026#34; \u0026#34;)  args = {}  for module_arg in parsed:  kv = module_arg.split(\u0026#34;=\u0026#34;)  args[kv[0]] = kv[1]  func(args) if __name__ == \u0026#39;__main__\u0026#39;:  ansible(module=\u0026#39;copy\u0026#39;, module_args=\u0026#34;name=name test=test\u0026#34;) mindmap of ansible Ansible 脑图:\n","date":"July 1, 2018","image":null,"permalink":"/blog/ansible/1-ansible-in-10-minutes/","title":"ansible In 30 Minutes"},{"categories":["automation"],"contents":"Ansible 介绍 Ansible 目前都是使用在python2上面.\ninstallation 在MAC 上面安装ansible有两种方式：\n pip  pip install ansible  brew  brew install ansible ansible playbook 的简单使用 ansible 大概的一个框架图如下： 下面简单介绍一个使用ansible的例子：\n  配置hosts文件 在当前目录创建一个hosts文件：\n [jenkins]  192.168.3.50   配置ansible yml playbook文件 配置当前一个yml文件:\n- hosts: jenkins  user: root  accelerate:true  tasks:  - name: restart_nginx  shell: sh /root/auto_publish_qadoc.sh   运行命令\n ansible-playbook playbook.yml -i hosts -vv 就可以运行这些命令了,最简单的ansible就是这样上手非常容易. 不过仔细看看他的帮助文档的话，其实对于python不熟的人还是会有一定难度，不过如果写过程序的人，写过python东西的人来说，其实 过一下这个document估计也就是1天时间就可以上手干活了.\n  ","date":"March 30, 2016","image":null,"permalink":"/blog/ansible/2016-03-30-ansible_basic/","title":"Ansible简单介绍"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://qdriven.github.io/images/author_hu37ae56563c66f39bdbf8622184166817_4018496_650x0_resize_box_3.png","permalink":"/about/","title":"About The Author"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://qdriven.github.io/images/author_hu37ae56563c66f39bdbf8622184166817_4018496_650x0_resize_box_3.png","permalink":"/contact/","title":"Let's, Talk About You"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://qdriven.github.io/images/author_hu37ae56563c66f39bdbf8622184166817_4018496_650x0_resize_box_3.png","permalink":"/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://qdriven.github.io/images/author_hu37ae56563c66f39bdbf8622184166817_4018496_650x0_resize_box_3.png","permalink":"/search/","title":"Search Result"}]