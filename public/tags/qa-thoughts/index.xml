<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>qa-thoughts on Fluent QA Blog</title><link>https://qdriven.github.io/tags/qa-thoughts/</link><description>Recent content in qa-thoughts on Fluent QA Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Oct 2020 11:40:11 +0200</lastBuildDate><atom:link href="https://qdriven.github.io/tags/qa-thoughts/index.xml" rel="self" type="application/rss+xml"/><item><title>QE-Meetup： TDD 小结</title><link>https://qdriven.github.io/blog/qa-thoughts/1-tdd-way/</link><pubDate>Wed, 07 Oct 2020 11:40:11 +0200</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/1-tdd-way/</guid><description> 以下是关于TDD的小结，我个人的感受是：
如果这个实践做的事情只是想知道那些接口出现了变动，那么可能通过代码review或者沟通是更好的方式，为了得到这个目的感觉要做的事情有点多 技术自然是很厉害，但是团队是不是沟通上面出现问题了？难道都不愿意到连改了什么，影响什么都不想说了</description></item><item><title>放养式开发管理</title><link>https://qdriven.github.io/blog/qa-thoughts/3-let-it-be/</link><pubDate>Tue, 11 Aug 2020 08:58:55 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/3-let-it-be/</guid><description>或许是在充满巨大不确定性的情况下，或许是在敏捷开发的情况下，放养开发管理变得越来越多.陆陆续续经历了一些公司，项目，发现几乎是一个共性.
我相信放养式开发管理是个中性词，没有好和坏，更多的是适合不适合. 一个词在不同的环境下，反应的情况是不一样的。
放养式开发管理 - 一个成功的例子 如果在一个开发个人能力突出，严谨，负责，功能能力强的团队，放养式开发管理可以介绍很多不太需要的沟通成本，大家相互信任，对于共同的期望值有足够的默契，这是没有什么问题的， 这样的团队我也在其中过，那是一个非常棒的体验， 理性，克制，坦诚，一个目标，各司其职，而且都能完成的很好。但是如果我回头看看以前的这个团队的成员，每个人5年后发展，总共4个人，一个P8，一个高级经理了，一个资深架构了，一个创业当老板了。有时会感慨，这是一个什么团队.
这其实是个放养的团队，这个团队的事情现在回想起来还是如此的生动。苦活脏活也干，比如手动对比上千份PDF文档；技术难度高的活也做，比如修改apache 开源代码替换商业软件，提升很高的性能. 但是这些都是因为这个团队足够自驱，足够成熟，并且也并没有把KPI想的那么严重，只是相信比原来好，KPI就不会差.
放养式开发管理 - 不那么成功的大多数 从这个团队出来之后，陆陆续续遇到的一些放养式开发管理，遇到的问题，其实大体一样，就是不可控的实现方式。
什么叫不可控的实现方式？ 其实就是实现某个功能，你完全不能控制具体实现的方式，这些实现方式往往和技术Leader的想法差别很大，以为是这样的，往往变成不知道的一个什么情况；时间久了，技术债务越堆越多,以后变成难以维护.
也想过这些原因，个人觉得原因可能如下:
现在公司中的项目很多都是具有巨大不确定性，所以开发人员对他的预期其实是很模糊的，那么做到什么程度大家其实是没有一致的共识的 团队成员结构，很多其实很奇怪，一个Leader级别非常高，然后其他人很多可能都是1，2年的新手，这些新手完成功能可能还可以，但是如果说的实现的好坏，视野和品味就不够了，都觉的自己的实现好，但是其实还没有办法进行全面客观的评价了 团队对于项目技术和工程实现上没有预期，就是没有要求；所以自然做到哪里算哪里，怎么做当然也就无所谓了；但是问题是，团队需要锻炼，成员需要培养，如果不从一点一点的小项目的实战中锻炼，哪里来的提高呢？ 从哪里去选拔中间层呢？ 团队成员自驱和自我学习的能力并没有那么强，其实这才是普通团队的情况，你能遇到一个团队里面每个人都自驱，自省，自我学习能力强，这个其实也是基本非常难的；所以如果都是放养式管理，很显然是不合适的 管理能力，不是所有leader有管理能力，所以放养式是一个好办法，所谓结果导向吧，但是结果呢？当然怎么看待这个结果的事情，从我的角度看，技术团队业务贡献产出和技术工程能力都需要看，但是大部分主要还是看业务产出了，那么很明显，放养式管理是个好选择，因为管理人员不需要耗费很大的精力去培养，锻炼，只需要下个命令就可以了，但是技术和工程方面呢？ 如果一个技术团队对于技术和工程上没有期望值，大体上，慢慢的，项目和团队就会变得越来越难。</description></item><item><title>做决定，负责任</title><link>https://qdriven.github.io/blog/qa-thoughts/2-decision-making/</link><pubDate>Mon, 10 Aug 2020 21:50:47 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/2-decision-making/</guid><description>做决定，负责任,并不容易.
测试工作，决定，负责任 为什么突然想起这个做决定，负责任的话题？因为日常工作中，我慢慢发现很多很多的开发同学不喜欢做决定，明明很多事情再我看来可以下决定，却非要请示上级，而每一次的请示有时会有很长一个等待时间，而有时这个等待时间往往在下班前后，叫人下班也不是，不下班也不是，只能单纯的等待请示结果.
举个实际的例子来说，下班前的我们测试说测试完成了，可以上线了。然后负责这个功能的开发就是准备上线，问运维什么是否可以今天上线？运维回答说明天可以上线吗？开发马上把问题给了他老板，让他老板同不同意？而他的老板由于出差，等了三个多小时才回复可以介绍今天不上线。
这个只是一件事情，但是我遇到过不少类似的事情。 我不能说这样的事情有什么大的不对，但是有时细细想想，十分不是滋味。
为什么呢？首先这个时候支持开发上线的测试和运维中间这三个小时是下班好还是不下班好？第二个问题，为什么开发不知道老板对这个事情的期望，事实上老板的期望的时间并不是当天晚上就一定要上线.
那么对于这件事情来说，我对我们测试人员的要求就是:
计划: 确定和同步所有人对于上线时间点的预期，让所有人都知道什么时候上线，什么时候开始做准备，如果需要在非工作时间上线，那么提前说明，兄弟部门不是不愿意加班，而是不愿意莫名其妙的加班 应对变化: 如果上线出现了点意料之外的情况，那么首先判断的是是不是非要今天上线这个时间点上线，匆忙中有没有额外的风险；如果不是，那就换到明天稳妥的时间段上线，生产的稳定一定是比其他东西更重要的；不管是从KPI的角度来说，你上线一个充满着不确定的新功能而造成生产事故，这是丢了西瓜捡了芝麻的事情 一定要有决定，无论上线还是不上线，一定要下决定，判断的依据其实就是，是不是事先已经计划好了，是不是重要的非要带着重大的风险上线，是不是需要所有部门都要加班支持你的程度？每个部门都有自己重要的事情，凡事不能到滥用的地步</description></item><item><title>软件质量文化建设</title><link>https://qdriven.github.io/blog/qa-thoughts/0-build-in-q/</link><pubDate>Mon, 07 Oct 2019 11:40:11 +0200</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/0-build-in-q/</guid><description>什么是质量文化 测试/QA质量文化建设 内建质量 质量外延 测试过程中的常见问题 这些都是测试过程中的常见问题，但是其实都不容易解决.为什么不容易解决，主要问题：
测试中发现的问题往往比较零散,不容易总结 这些问题的解决往往短期内看不到直接效果，是一个系统工程 项目可能都是短期的，谁会在意长期的事情？ 出现问题方可以把所有的问题都指向测试，而自身的压力会不自觉的减轻，但是无论如何转移责任并不会解决问题 测试压力很大，但是有时问题大到测试没有能力解决了 关于质量的建设有以下几个需要事先了解的:
没有数据根本无从说起 没有对比就没有改进 质量是个长期工作,长期艰苦枯燥的工作 没太多人愿意做长期枯燥的工作，但是公司实际上是需要的 质量是系统工程，需要系统参与不是只有QA一个部门 质量不止靠 QA 角色兜底的意识/工作方式，只靠测试QA是可以转移责任，但是不能解决问题 发现问题同样重要，QA虽然不能直接解决问题，但是他能让更高层对于工程能力,产品能力有更全面的认识；只听到好话的公司，也是危险的，更高层如果只听到好话，并且真的认为很好，那会造成很多的误判，是不负责任的轻信 没有经过验证的进度，可能都是虚假的进度，会造成资源的错误估计 内建质量 研发，产品，QA，设计，数据分析师,市场每个角色都会对最终产品形态有直接影响。</description></item><item><title>Think in Testing 1-Be Tough</title><link>https://qdriven.github.io/blog/qa-thoughts/4-be-tough/</link><pubDate>Sun, 28 Apr 2019 23:58:45 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/4-be-tough/</guid><description>Think in Testing 1: Be Tough If someone tell you that software testing or quality assurance is an easy job to do, he/she might not understand what a tester or qa do.</description></item><item><title>Be Tough as a QA</title><link>https://qdriven.github.io/blog/qa-thoughts/thoughts-be-a-touch-tester/</link><pubDate>Tue, 20 Nov 2018 09:25:03 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/thoughts-be-a-touch-tester/</guid><description>Think in Testing 1: Be Tough If someone tell you that software testing or quality assurance is an easy job to do, he/she might not understand what a tester or qa do.</description></item><item><title>下一步的技术了解</title><link>https://qdriven.github.io/blog/qa-thoughts/2015-12-28-next-reading/</link><pubDate>Mon, 28 Dec 2015 19:49:29 +0000</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/2015-12-28-next-reading/</guid><description>Thoughtworks 发布了2015年技术雷达，看看他提到的东西可以长长见识。
技术篇 这里提到了几篇Martin Flower的文章，抽时间一定要看看。
Test Double nonDeterminism microservice 基本上他写的文章确实有必要看看的。 安全 －Thread Modeling
工具,语言，观念 graphiz hoodie couchdb Flux git as cms phoneix server functional reactive programing （FRP） Spark kylin.</description></item><item><title>测试用例设计- 随机指定一个产品的测试</title><link>https://qdriven.github.io/blog/qa-thoughts/2015-10-22-random-testcasedesign/</link><pubDate>Thu, 22 Oct 2015 10:31:11 +0800</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/2015-10-22-random-testcasedesign/</guid><description>有时面试的时候会随机指定一个产品进行测试,比如一个电梯,你会如何设计测试用例？这个问题很发散,更多的是看应聘者的条理 和分析能力.
本质上一个电梯是一个太大的范畴，实际测试的过程中很少一下子会有这么巨大的功能让你测试的。 与其说让你设计测试用例，其实好不如说让你想一个电梯有什么功能,然后根据功能再来考虑测试用例,所以更多的 是考察思路,在实际的测试工作中,如果突然有个人说我今天完成了一个电梯的功能,找个人给我测一下吧。 那么多半这个项目就是个让测试欲哭无泪的项目。
不过既然面试有人问这样的问题，那么就分析分析吧，以下我是把电梯转化为类似互联网产品来做的分析， 完全是个人想法,一定有非常多欠缺。
后端服务组件和客户端分离(Client-Server/MVC) 首先其实对把一个电梯分成不同的组件：
驱动服务: 可以使电梯上下行(后台服务) 门: 开门关门(后台服务) 电梯操作面板: 人机界面,担当用户和电梯的一个中间人作用,将用户操作转化为指令来控制电梯 (app/web page) (如果简单的话可能操作命令转换就都在这个地方了，如果复杂可能还有一个控制系统层) 指令控制系统(调度系统,监听器或者Queue) 呼叫监控系统:(可以暂时不考虑) 这里就先考虑简单的情况，电梯操作面板模块之内将操作转换成指令给电梯的驱动和门服务</description></item><item><title>关于测试职业疑惑的一点想法</title><link>https://qdriven.github.io/blog/qa-thoughts/2013-09-24-thoughts_on_testing/</link><pubDate>Tue, 24 Sep 2013 10:31:11 +0800</pubDate><guid>https://qdriven.github.io/blog/qa-thoughts/2013-09-24-thoughts_on_testing/</guid><description>引子 作为全职测试大概有8年时间了，总体来说整个这8年不是一个愉快的过程。其中辛苦可能没有做过测试的人未必能理解。对于一个职场人来说不够愉快的点个人认为大概可能是以下几点：
成就感不多 个人技术积累不多 可供选择的机会相对较少，转型难度大 问题分析 1. 成就感不多 1.1.决定产品好坏的不是测试 大体可以罗列一下一个好的产品的几个要素：
解决了其他人没有解决的重要问题 易用，好用 扩展性好，定制能力强 稳定，bug少 性能出色 交付快，成本低 个人认为以上几点中测试几乎都无法起到决定因素。测试人可能看到某些新的需求，但是很难从更高层面上来看待产品；可用性上面同样也是一样的问题，可以提出优化的点，但是可能只是点到为止了；扩展性，定制能力，基本上看架构设计和开发的质量；至于稳定，bug少，性能好这个也要看团队了，大体上个人认为还是开发权重高；交付快，成本低，个人认为这块测试有一些权重，而且我认为测试需要投入更多的东西在这个层面</description></item></channel></rss>